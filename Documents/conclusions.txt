Conclusions :
	1. Call RelinearizeInplace and rescale - after each multiplication to insure :  scale stabilization
		1.1 scale stabilization is importent because :
			1.1.1 avoid out of scaling
			1.1.2 keeps performance same level
			1.1.3 avoid unnecessary percision 
	2. After multiplication : 
		2.1 the scale grows ~ scale ^2 = scales_bits*2
	3. There is max bits allowed per each polinomial degree (polyModulusDegree )
		3.1 CoeffModulus.MaxBitCount (8196 = 218)
	4. CoeffModulus :  
		4.1 most "problematic"  feature to choose
		4.2 depends on percision and calculation depth
		4.3 from seal comments :
			4.3.1 first prime = Choose a 60-bit prime as the first prime in CoeffModulus. This will
                    give the highest precision when decrypting
			4.3.2 choose another 60-bit prime as the last element of CoeffModulus, as
                    this will be used as the special prime and should be as large as the
                    largest of the other primes;
			4.3.3  Choose the intermediate primes to be close to each other
		4.4 minimum bits is :  2^bit_size - 2 * ntt_size(polyModulusDegree) + 1
	5.ParmsId
		5.1  Encrypted multiplication addition and subtraction require that the scales of the inputs are
            the same, and also that the encryption parameters (ParmsId) match
	6. WARNINGS : multipky by ZERO!!!
			